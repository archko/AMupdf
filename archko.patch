diff --git a/platform/java/Android.mk b/platform/java/Android.mk
index 5b3f3961c..a55bb78c0 100644
--- a/platform/java/Android.mk
+++ b/platform/java/Android.mk
@@ -107,6 +107,7 @@ LOCAL_CPPFLAGS := \
 	-Dhb_calloc_impl=fz_hb_calloc \
 	-Dhb_realloc_impl=fz_hb_realloc \
 	-Dhb_free_impl=fz_hb_free \
+	-std=c++11 \
 
 LOCAL_CPPFLAGS += \
 	$(MUPDF_EXTRA_CPPFLAGS)
diff --git a/platform/java/mupdf_native.c b/platform/java/mupdf_native.c
index 67c9ea6c1..dfdbbed39 100644
--- a/platform/java/mupdf_native.c
+++ b/platform/java/mupdf_native.c
@@ -6452,6 +6452,328 @@ FUN(Page_textAsHtml)(JNIEnv *env, jobject self)
 	return arr;
 }
 
+JNIEXPORT jbyteArray JNICALL
+FUN(Page_textAsHtml2)(JNIEnv *env, jobject self, jstring joptions)
+{
+    fz_context *ctx = get_context(env);
+    fz_page *page = from_Page(env, self);
+    fz_stext_page *text = NULL;
+    fz_device *dev = NULL;
+    fz_matrix ctm;
+    jbyteArray arr = NULL;
+    fz_buffer *buf = NULL;
+    fz_output *out = NULL;
+    unsigned char *data;
+    size_t len;
+    const char *options= NULL;
+    fz_stext_options opts;
+
+    if (!ctx || !page) return NULL;
+
+    if (joptions)
+    {
+        options = (*env)->GetStringUTFChars(env, joptions, NULL);
+        if (!options) return NULL;
+    }
+
+    fz_try(ctx)
+    {
+        fz_parse_stext_options(ctx, &opts, options);
+    }
+    fz_catch(ctx)
+    {
+    }
+
+    fz_var(text);
+    fz_var(dev);
+    fz_var(buf);
+    fz_var(out);
+
+    fz_try(ctx)
+    {
+        ctm = fz_identity;
+        text = fz_new_stext_page(ctx, fz_bound_page(ctx, page));
+        dev = fz_new_stext_device(ctx, text, &opts);
+        fz_run_page(ctx, page, dev, ctm, NULL);
+        fz_close_device(ctx, dev);
+
+        buf = fz_new_buffer(ctx, 256);
+        out = fz_new_output_with_buffer(ctx, buf);
+        //fz_print_stext_header_as_html(ctx, out);
+        fz_print_stext_page_as_html(ctx, out, text, page->number);
+        //fz_print_stext_trailer_as_html(ctx, out);
+        fz_close_output(ctx, out);
+
+		len = fz_buffer_storage(ctx, buf, &data);
+		arr = (*env)->NewByteArray(env, (jsize)len);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+		if (!arr)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot create byte array");
+
+		(*env)->SetByteArrayRegion(env, arr, 0, (jsize)len, (jbyte *)data);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+    }
+    fz_always(ctx)
+    {
+        if (options)
+            (*env)->ReleaseStringUTFChars(env, joptions, options);
+        fz_drop_output(ctx, out);
+		fz_drop_buffer(ctx, buf);
+        fz_drop_device(ctx, dev);
+        fz_drop_stext_page(ctx, text);
+    }
+    fz_catch(ctx)
+    {
+        jni_rethrow(env, ctx);
+        return NULL;
+    }
+
+    return arr;
+}
+
+JNIEXPORT jbyteArray JNICALL
+FUN(Page_textAsXHtml)(JNIEnv *env, jobject self, jstring joptions)
+{
+    fz_context *ctx = get_context(env);
+    fz_page *page = from_Page(env, self);
+    fz_stext_page *text = NULL;
+    fz_device *dev = NULL;
+    fz_matrix ctm;
+    jbyteArray arr = NULL;
+    fz_buffer *buf = NULL;
+    fz_output *out = NULL;
+    unsigned char *data;
+    size_t len;
+    const char *options= NULL;
+    fz_stext_options opts;
+
+    if (!ctx || !page) return NULL;
+
+    if (joptions)
+    {
+        options = (*env)->GetStringUTFChars(env, joptions, NULL);
+        if (!options) return NULL;
+    }
+
+    fz_try(ctx)
+    {
+        fz_parse_stext_options(ctx, &opts, options);
+    }
+    fz_catch(ctx)
+    {
+    }
+
+    fz_var(text);
+    fz_var(dev);
+    fz_var(buf);
+    fz_var(out);
+
+    fz_try(ctx)
+    {
+        ctm = fz_identity;
+        text = fz_new_stext_page(ctx, fz_bound_page(ctx, page));
+        dev = fz_new_stext_device(ctx, text, &opts);
+        fz_run_page(ctx, page, dev, ctm, NULL);
+        fz_close_device(ctx, dev);
+
+        buf = fz_new_buffer(ctx, 256);
+        out = fz_new_output_with_buffer(ctx, buf);
+        //fz_print_stext_header_as_xhtml(ctx, out);
+        fz_print_stext_page_as_xhtml(ctx, out, text, page->number);
+        //fz_print_stext_trailer_as_xhtml(ctx, out);
+        fz_close_output(ctx, out);
+
+		len = fz_buffer_storage(ctx, buf, &data);
+		arr = (*env)->NewByteArray(env, (jsize)len);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+		if (!arr)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot create byte array");
+
+		(*env)->SetByteArrayRegion(env, arr, 0, (jsize)len, (jbyte *)data);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+    }
+    fz_always(ctx)
+    {
+        if (options)
+            (*env)->ReleaseStringUTFChars(env, joptions, options);
+        fz_drop_output(ctx, out);
+		fz_drop_buffer(ctx, buf);
+        fz_drop_device(ctx, dev);
+        fz_drop_stext_page(ctx, text);
+    }
+    fz_catch(ctx)
+    {
+        jni_rethrow(env, ctx);
+        return NULL;
+    }
+
+    return arr;
+}
+
+JNIEXPORT jbyteArray JNICALL
+FUN(Page_textAsText)(JNIEnv *env, jobject self, jstring joptions)
+{
+    fz_context *ctx = get_context(env);
+    fz_page *page = from_Page(env, self);
+    fz_stext_page *text = NULL;
+    fz_device *dev = NULL;
+    fz_matrix ctm;
+    jbyteArray arr = NULL;
+    fz_buffer *buf = NULL;
+    fz_output *out = NULL;
+    unsigned char *data;
+    size_t len;
+    const char *options= NULL;
+    fz_stext_options opts;
+
+    if (!ctx || !page) return NULL;
+
+    if (joptions)
+    {
+        options = (*env)->GetStringUTFChars(env, joptions, NULL);
+        if (!options) return NULL;
+    }
+
+    fz_try(ctx)
+    {
+        fz_parse_stext_options(ctx, &opts, options);
+    }
+    fz_catch(ctx)
+    {
+    }
+
+    fz_var(text);
+    fz_var(dev);
+    fz_var(buf);
+    fz_var(out);
+
+    fz_try(ctx)
+    {
+        ctm = fz_identity;
+        text = fz_new_stext_page(ctx, fz_bound_page(ctx, page));
+        dev = fz_new_stext_device(ctx, text, &opts);
+        fz_run_page(ctx, page, dev, ctm, NULL);
+        fz_close_device(ctx, dev);
+
+        buf = fz_new_buffer(ctx, 256);
+        out = fz_new_output_with_buffer(ctx, buf);
+        fz_print_stext_page_as_text(ctx, out, text);
+        fz_close_output(ctx, out);
+
+		len = fz_buffer_storage(ctx, buf, &data);
+		arr = (*env)->NewByteArray(env, (jsize)len);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+		if (!arr)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot create byte array");
+
+		(*env)->SetByteArrayRegion(env, arr, 0, (jsize)len, (jbyte *)data);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+    }
+    fz_always(ctx)
+    {
+        if (options)
+            (*env)->ReleaseStringUTFChars(env, joptions, options);
+        fz_drop_output(ctx, out);
+		fz_drop_buffer(ctx, buf);
+        fz_drop_device(ctx, dev);
+        fz_drop_stext_page(ctx, text);
+    }
+    fz_catch(ctx)
+    {
+        jni_rethrow(env, ctx);
+        return NULL;
+    }
+
+    return arr;
+}
+
+JNIEXPORT jbyteArray JNICALL
+FUN(Page_textAsTextOrHtml)(JNIEnv *env, jobject self, jstring joptions)
+{
+    fz_context *ctx = get_context(env);
+    fz_page *page = from_Page(env, self);
+    fz_stext_page *text = NULL;
+    fz_device *dev = NULL;
+    fz_matrix ctm;
+    jbyteArray arr = NULL;
+    fz_buffer *buf = NULL;
+    fz_output *out = NULL;
+    unsigned char *data;
+    size_t len;
+    const char *options= NULL;
+    fz_stext_options opts;
+
+    if (!ctx || !page) return NULL;
+
+    if (joptions)
+    {
+        options = (*env)->GetStringUTFChars(env, joptions, NULL);
+        if (!options) return NULL;
+    }
+
+    fz_try(ctx)
+    {
+        fz_parse_stext_options(ctx, &opts, options);
+    }
+    fz_catch(ctx)
+    {
+    }
+
+    fz_var(text);
+    fz_var(dev);
+    fz_var(buf);
+    fz_var(out);
+
+    fz_try(ctx)
+    {
+        ctm = fz_identity;
+        text = fz_new_stext_page(ctx, fz_bound_page(ctx, page));
+        dev = fz_new_stext_device(ctx, text, &opts);
+        fz_run_page(ctx, page, dev, ctm, NULL);
+        fz_close_device(ctx, dev);
+
+        buf = fz_new_buffer(ctx, 256);
+        out = fz_new_output_with_buffer(ctx, buf);
+
+        fz_print_stext_page_as_text(ctx, out, text);
+
+        fz_close_output(ctx, out);
+
+		len = fz_buffer_storage(ctx, buf, &data);
+		arr = (*env)->NewByteArray(env, (jsize)len);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+		if (!arr)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot create byte array");
+
+		(*env)->SetByteArrayRegion(env, arr, 0, (jsize)len, (jbyte *)data);
+		if ((*env)->ExceptionCheck(env))
+			fz_throw_java(ctx, env);
+    }
+    fz_always(ctx)
+    {
+        if (options)
+            (*env)->ReleaseStringUTFChars(env, joptions, options);
+        fz_drop_output(ctx, out);
+		fz_drop_buffer(ctx, buf);
+        fz_drop_device(ctx, dev);
+        fz_drop_stext_page(ctx, text);
+    }
+    fz_catch(ctx)
+    {
+        jni_rethrow(env, ctx);
+        return NULL;
+    }
+
+	return arr;
+}
+
 /* Cookie interface */
 
 JNIEXPORT void JNICALL
diff --git a/platform/java/src/com/artifex/mupdf/fitz/Page.java b/platform/java/src/com/artifex/mupdf/fitz/Page.java
index f31ce6930..b1fd8b8d0 100644
--- a/platform/java/src/com/artifex/mupdf/fitz/Page.java
+++ b/platform/java/src/com/artifex/mupdf/fitz/Page.java
@@ -50,6 +50,9 @@ public class Page
 	public native Quad[] search(String needle);

 	public native byte[] textAsHtml();
+	public native byte[] textAsHtml2(String options);
+	public native byte[] textAsXHtml(String options);
+	public native byte[] textAsText(String options);

 	public native Separations getSeparations();
 }
diff --git a/source/fitz/stext-output.c b/source/fitz/stext-output.c
index 69d6f5c84..1d5baf5b0 100644
--- a/source/fitz/stext-output.c
+++ b/source/fitz/stext-output.c
@@ -473,7 +473,9 @@ fz_print_stext_page_as_text(fz_context *ctx, fz_output *out, fz_stext_page *page
 				fz_write_string(ctx, out, "\n");
 			}
 			fz_write_string(ctx, out, "\n");
-		}
+		} else {
+			fz_print_stext_image_as_xhtml(ctx, out, block);
+        }
 	}
 }

